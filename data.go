// Code generated by go-bindata.
// sources:
// public.pem
// private.pem
// ui/404.html
// ui/451.html
// ui/index.html
// ui/assets/.DS_Store
// ui/assets/bin/.DS_Store
// ui/assets/bin/custom.js
// ui/assets/bin/plugins/.DS_Store
// ui/assets/bin/plugins/advlist/plugin.min.js
// ui/assets/bin/plugins/anchor/plugin.min.js
// ui/assets/bin/plugins/autolink/plugin.min.js
// ui/assets/bin/plugins/autoresize/plugin.min.js
// ui/assets/bin/plugins/autosave/plugin.min.js
// ui/assets/bin/plugins/bbcode/plugin.min.js
// ui/assets/bin/plugins/charmap/plugin.min.js
// ui/assets/bin/plugins/code/plugin.js
// ui/assets/bin/plugins/code/plugin.min.js
// ui/assets/bin/plugins/codesample/css/prism.css
// ui/assets/bin/plugins/codesample/plugin.min.js
// ui/assets/bin/plugins/colorpicker/plugin.min.js
// ui/assets/bin/plugins/contextmenu/plugin.min.js
// ui/assets/bin/plugins/directionality/plugin.min.js
// ui/assets/bin/plugins/emoticons/img/smiley-cool.gif
// ui/assets/bin/plugins/emoticons/img/smiley-cry.gif
// ui/assets/bin/plugins/emoticons/img/smiley-embarassed.gif
// ui/assets/bin/plugins/emoticons/img/smiley-foot-in-mouth.gif
// ui/assets/bin/plugins/emoticons/img/smiley-frown.gif
// ui/assets/bin/plugins/emoticons/img/smiley-innocent.gif
// ui/assets/bin/plugins/emoticons/img/smiley-kiss.gif
// ui/assets/bin/plugins/emoticons/img/smiley-laughing.gif
// ui/assets/bin/plugins/emoticons/img/smiley-money-mouth.gif
// ui/assets/bin/plugins/emoticons/img/smiley-sealed.gif
// ui/assets/bin/plugins/emoticons/img/smiley-smile.gif
// ui/assets/bin/plugins/emoticons/img/smiley-surprised.gif
// ui/assets/bin/plugins/emoticons/img/smiley-tongue-out.gif
// ui/assets/bin/plugins/emoticons/img/smiley-undecided.gif
// ui/assets/bin/plugins/emoticons/img/smiley-wink.gif
// ui/assets/bin/plugins/emoticons/img/smiley-yell.gif
// ui/assets/bin/plugins/emoticons/plugin.min.js
// ui/assets/bin/plugins/fullpage/plugin.js
// ui/assets/bin/plugins/fullpage/plugin.min.js
// ui/assets/bin/plugins/fullscreen/plugin.js
// ui/assets/bin/plugins/fullscreen/plugin.min.js
// ui/assets/bin/plugins/help/img/logo.png
// ui/assets/bin/plugins/help/plugin.min.js
// ui/assets/bin/plugins/hr/plugin.min.js
// ui/assets/bin/plugins/image/plugin.min.js
// ui/assets/bin/plugins/imagetools/plugin.min.js
// ui/assets/bin/plugins/importcss/plugin.min.js
// ui/assets/bin/plugins/insertdatetime/plugin.min.js
// ui/assets/bin/plugins/legacyoutput/plugin.min.js
// ui/assets/bin/plugins/link/plugin.min.js
// ui/assets/bin/plugins/lists/plugin.min.js
// ui/assets/bin/plugins/media/plugin.min.js
// ui/assets/bin/plugins/nonbreaking/plugin.min.js
// ui/assets/bin/plugins/noneditable/plugin.min.js
// ui/assets/bin/plugins/pagebreak/plugin.min.js
// ui/assets/bin/plugins/paste/plugin.min.js
// ui/assets/bin/plugins/preview/plugin.min.js
// ui/assets/bin/plugins/print/plugin.min.js
// ui/assets/bin/plugins/save/plugin.min.js
// ui/assets/bin/plugins/searchreplace/plugin.min.js
// ui/assets/bin/plugins/spellchecker/plugin.min.js
// ui/assets/bin/plugins/tabfocus/plugin.min.js
// ui/assets/bin/plugins/table/plugin.min.js
// ui/assets/bin/plugins/template/plugin.min.js
// ui/assets/bin/plugins/textcolor/plugin.min.js
// ui/assets/bin/plugins/textpattern/plugin.min.js
// ui/assets/bin/plugins/toc/plugin.min.js
// ui/assets/bin/plugins/visualblocks/css/visualblocks.css
// ui/assets/bin/plugins/visualblocks/plugin.min.js
// ui/assets/bin/plugins/visualchars/plugin.min.js
// ui/assets/bin/plugins/wordcount/plugin.min.js
// ui/assets/bin/service-worker.js
// ui/assets/bin/skins/.DS_Store
// ui/assets/bin/skins/lightgray/.DS_Store
// ui/assets/bin/skins/lightgray/content.inline.min.css
// ui/assets/bin/skins/lightgray/content.min.css
// ui/assets/bin/skins/lightgray/fonts/tinymce-small.eot
// ui/assets/bin/skins/lightgray/fonts/tinymce-small.svg
// ui/assets/bin/skins/lightgray/fonts/tinymce-small.ttf
// ui/assets/bin/skins/lightgray/fonts/tinymce-small.woff
// ui/assets/bin/skins/lightgray/fonts/tinymce.eot
// ui/assets/bin/skins/lightgray/fonts/tinymce.svg
// ui/assets/bin/skins/lightgray/fonts/tinymce.ttf
// ui/assets/bin/skins/lightgray/fonts/tinymce.woff
// ui/assets/bin/skins/lightgray/img/anchor.gif
// ui/assets/bin/skins/lightgray/img/loader.gif
// ui/assets/bin/skins/lightgray/img/object.gif
// ui/assets/bin/skins/lightgray/img/trans.gif
// ui/assets/bin/skins/lightgray/skin.min.css
// ui/assets/bin/themes/.DS_Store
// ui/assets/bin/themes/inlite/index.js
// ui/assets/bin/themes/inlite/theme.js
// ui/assets/bin/themes/inlite/theme.min.js
// ui/assets/bin/themes/modern/.DS_Store
// ui/assets/bin/themes/modern/theme.min.js
// ui/assets/bin/tinymce.min.js
// ui/assets/bin/website.bundle.js
// ui/assets/css/.DS_Store
// ui/assets/css/tachyons+loadingio.css
// ui/assets/img/.DS_Store
// ui/assets/img/appimage.png
// ui/assets/img/applestore.png
// ui/assets/img/default.jpg
// ui/assets/img/googlestore.png
// ui/assets/img/logo.png
// ui/assets/manifest.json
// ui/templates/email-confirmation.html
// ui/templates/invitation-accepted.html
// ui/templates/invite-to-team.html
// ui/templates/invite.html
// ui/templates/notify-admin.htm
// ui/templates/report.html
// ui/templates/reset.html
// ui/templates/welcome.html
// DO NOT EDIT!

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// publicPem reads file data from disk. It returns an error on failure.
func publicPem() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/public.pem"
	name := "public.pem"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// privatePem reads file data from disk. It returns an error on failure.
func privatePem() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/private.pem"
	name := "private.pem"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// ui404Html reads file data from disk. It returns an error on failure.
func ui404Html() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/404.html"
	name := "ui/404.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// ui451Html reads file data from disk. It returns an error on failure.
func ui451Html() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/451.html"
	name := "ui/451.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiIndexHtml reads file data from disk. It returns an error on failure.
func uiIndexHtml() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/index.html"
	name := "ui/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsDs_store reads file data from disk. It returns an error on failure.
func uiAssetsDs_store() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/.DS_Store"
	name := "ui/assets/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinDs_store reads file data from disk. It returns an error on failure.
func uiAssetsBinDs_store() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/.DS_Store"
	name := "ui/assets/bin/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinCustomJs reads file data from disk. It returns an error on failure.
func uiAssetsBinCustomJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/custom.js"
	name := "ui/assets/bin/custom.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsDs_store reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsDs_store() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/.DS_Store"
	name := "ui/assets/bin/plugins/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsAdvlistPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsAdvlistPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/advlist/plugin.min.js"
	name := "ui/assets/bin/plugins/advlist/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsAnchorPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsAnchorPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/anchor/plugin.min.js"
	name := "ui/assets/bin/plugins/anchor/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsAutolinkPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsAutolinkPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/autolink/plugin.min.js"
	name := "ui/assets/bin/plugins/autolink/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsAutoresizePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsAutoresizePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/autoresize/plugin.min.js"
	name := "ui/assets/bin/plugins/autoresize/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsAutosavePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsAutosavePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/autosave/plugin.min.js"
	name := "ui/assets/bin/plugins/autosave/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsBbcodePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsBbcodePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/bbcode/plugin.min.js"
	name := "ui/assets/bin/plugins/bbcode/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsCharmapPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsCharmapPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/charmap/plugin.min.js"
	name := "ui/assets/bin/plugins/charmap/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsCodePluginJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsCodePluginJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/code/plugin.js"
	name := "ui/assets/bin/plugins/code/plugin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsCodePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsCodePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/code/plugin.min.js"
	name := "ui/assets/bin/plugins/code/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsCodesampleCssPrismCss reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsCodesampleCssPrismCss() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/codesample/css/prism.css"
	name := "ui/assets/bin/plugins/codesample/css/prism.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsCodesamplePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsCodesamplePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/codesample/plugin.min.js"
	name := "ui/assets/bin/plugins/codesample/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsColorpickerPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsColorpickerPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/colorpicker/plugin.min.js"
	name := "ui/assets/bin/plugins/colorpicker/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsContextmenuPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsContextmenuPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/contextmenu/plugin.min.js"
	name := "ui/assets/bin/plugins/contextmenu/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsDirectionalityPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsDirectionalityPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/directionality/plugin.min.js"
	name := "ui/assets/bin/plugins/directionality/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyCoolGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyCoolGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-cool.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-cool.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyCryGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyCryGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-cry.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-cry.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyEmbarassedGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyEmbarassedGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-embarassed.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-embarassed.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyFootInMouthGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyFootInMouthGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-foot-in-mouth.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-foot-in-mouth.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyFrownGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyFrownGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-frown.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-frown.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyInnocentGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyInnocentGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-innocent.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-innocent.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyKissGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyKissGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-kiss.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-kiss.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyLaughingGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyLaughingGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-laughing.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-laughing.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyMoneyMouthGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyMoneyMouthGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-money-mouth.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-money-mouth.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileySealedGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileySealedGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-sealed.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-sealed.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileySmileGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileySmileGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-smile.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-smile.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileySurprisedGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileySurprisedGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-surprised.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-surprised.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyTongueOutGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyTongueOutGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-tongue-out.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-tongue-out.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyUndecidedGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyUndecidedGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-undecided.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-undecided.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyWinkGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyWinkGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-wink.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-wink.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsImgSmileyYellGif reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsImgSmileyYellGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/img/smiley-yell.gif"
	name := "ui/assets/bin/plugins/emoticons/img/smiley-yell.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsEmoticonsPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsEmoticonsPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/emoticons/plugin.min.js"
	name := "ui/assets/bin/plugins/emoticons/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsFullpagePluginJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsFullpagePluginJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/fullpage/plugin.js"
	name := "ui/assets/bin/plugins/fullpage/plugin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsFullpagePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsFullpagePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/fullpage/plugin.min.js"
	name := "ui/assets/bin/plugins/fullpage/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsFullscreenPluginJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsFullscreenPluginJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/fullscreen/plugin.js"
	name := "ui/assets/bin/plugins/fullscreen/plugin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsFullscreenPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsFullscreenPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/fullscreen/plugin.min.js"
	name := "ui/assets/bin/plugins/fullscreen/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsHelpImgLogoPng reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsHelpImgLogoPng() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/help/img/logo.png"
	name := "ui/assets/bin/plugins/help/img/logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsHelpPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsHelpPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/help/plugin.min.js"
	name := "ui/assets/bin/plugins/help/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsHrPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsHrPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/hr/plugin.min.js"
	name := "ui/assets/bin/plugins/hr/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsImagePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsImagePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/image/plugin.min.js"
	name := "ui/assets/bin/plugins/image/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsImagetoolsPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsImagetoolsPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/imagetools/plugin.min.js"
	name := "ui/assets/bin/plugins/imagetools/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsImportcssPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsImportcssPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/importcss/plugin.min.js"
	name := "ui/assets/bin/plugins/importcss/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsInsertdatetimePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsInsertdatetimePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/insertdatetime/plugin.min.js"
	name := "ui/assets/bin/plugins/insertdatetime/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsLegacyoutputPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsLegacyoutputPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/legacyoutput/plugin.min.js"
	name := "ui/assets/bin/plugins/legacyoutput/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsLinkPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsLinkPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/link/plugin.min.js"
	name := "ui/assets/bin/plugins/link/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsListsPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsListsPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/lists/plugin.min.js"
	name := "ui/assets/bin/plugins/lists/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsMediaPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsMediaPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/media/plugin.min.js"
	name := "ui/assets/bin/plugins/media/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsNonbreakingPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsNonbreakingPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/nonbreaking/plugin.min.js"
	name := "ui/assets/bin/plugins/nonbreaking/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsNoneditablePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsNoneditablePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/noneditable/plugin.min.js"
	name := "ui/assets/bin/plugins/noneditable/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsPagebreakPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsPagebreakPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/pagebreak/plugin.min.js"
	name := "ui/assets/bin/plugins/pagebreak/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsPastePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsPastePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/paste/plugin.min.js"
	name := "ui/assets/bin/plugins/paste/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsPreviewPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsPreviewPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/preview/plugin.min.js"
	name := "ui/assets/bin/plugins/preview/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsPrintPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsPrintPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/print/plugin.min.js"
	name := "ui/assets/bin/plugins/print/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsSavePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsSavePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/save/plugin.min.js"
	name := "ui/assets/bin/plugins/save/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsSearchreplacePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsSearchreplacePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/searchreplace/plugin.min.js"
	name := "ui/assets/bin/plugins/searchreplace/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsSpellcheckerPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsSpellcheckerPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/spellchecker/plugin.min.js"
	name := "ui/assets/bin/plugins/spellchecker/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsTabfocusPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsTabfocusPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/tabfocus/plugin.min.js"
	name := "ui/assets/bin/plugins/tabfocus/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsTablePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsTablePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/table/plugin.min.js"
	name := "ui/assets/bin/plugins/table/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsTemplatePluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsTemplatePluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/template/plugin.min.js"
	name := "ui/assets/bin/plugins/template/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsTextcolorPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsTextcolorPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/textcolor/plugin.min.js"
	name := "ui/assets/bin/plugins/textcolor/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsTextpatternPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsTextpatternPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/textpattern/plugin.min.js"
	name := "ui/assets/bin/plugins/textpattern/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsTocPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsTocPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/toc/plugin.min.js"
	name := "ui/assets/bin/plugins/toc/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsVisualblocksCssVisualblocksCss reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsVisualblocksCssVisualblocksCss() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/visualblocks/css/visualblocks.css"
	name := "ui/assets/bin/plugins/visualblocks/css/visualblocks.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsVisualblocksPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsVisualblocksPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/visualblocks/plugin.min.js"
	name := "ui/assets/bin/plugins/visualblocks/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsVisualcharsPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsVisualcharsPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/visualchars/plugin.min.js"
	name := "ui/assets/bin/plugins/visualchars/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinPluginsWordcountPluginMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinPluginsWordcountPluginMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/plugins/wordcount/plugin.min.js"
	name := "ui/assets/bin/plugins/wordcount/plugin.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinServiceWorkerJs reads file data from disk. It returns an error on failure.
func uiAssetsBinServiceWorkerJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/service-worker.js"
	name := "ui/assets/bin/service-worker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsDs_store reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsDs_store() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/.DS_Store"
	name := "ui/assets/bin/skins/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayDs_store reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayDs_store() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/.DS_Store"
	name := "ui/assets/bin/skins/lightgray/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayContentInlineMinCss reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayContentInlineMinCss() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/content.inline.min.css"
	name := "ui/assets/bin/skins/lightgray/content.inline.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayContentMinCss reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayContentMinCss() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/content.min.css"
	name := "ui/assets/bin/skins/lightgray/content.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayFontsTinymceSmallEot reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayFontsTinymceSmallEot() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/fonts/tinymce-small.eot"
	name := "ui/assets/bin/skins/lightgray/fonts/tinymce-small.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayFontsTinymceSmallSvg reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayFontsTinymceSmallSvg() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/fonts/tinymce-small.svg"
	name := "ui/assets/bin/skins/lightgray/fonts/tinymce-small.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayFontsTinymceSmallTtf reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayFontsTinymceSmallTtf() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/fonts/tinymce-small.ttf"
	name := "ui/assets/bin/skins/lightgray/fonts/tinymce-small.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayFontsTinymceSmallWoff reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayFontsTinymceSmallWoff() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/fonts/tinymce-small.woff"
	name := "ui/assets/bin/skins/lightgray/fonts/tinymce-small.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayFontsTinymceEot reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayFontsTinymceEot() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/fonts/tinymce.eot"
	name := "ui/assets/bin/skins/lightgray/fonts/tinymce.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayFontsTinymceSvg reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayFontsTinymceSvg() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/fonts/tinymce.svg"
	name := "ui/assets/bin/skins/lightgray/fonts/tinymce.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayFontsTinymceTtf reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayFontsTinymceTtf() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/fonts/tinymce.ttf"
	name := "ui/assets/bin/skins/lightgray/fonts/tinymce.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayFontsTinymceWoff reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayFontsTinymceWoff() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/fonts/tinymce.woff"
	name := "ui/assets/bin/skins/lightgray/fonts/tinymce.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayImgAnchorGif reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayImgAnchorGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/img/anchor.gif"
	name := "ui/assets/bin/skins/lightgray/img/anchor.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayImgLoaderGif reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayImgLoaderGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/img/loader.gif"
	name := "ui/assets/bin/skins/lightgray/img/loader.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayImgObjectGif reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayImgObjectGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/img/object.gif"
	name := "ui/assets/bin/skins/lightgray/img/object.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgrayImgTransGif reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgrayImgTransGif() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/img/trans.gif"
	name := "ui/assets/bin/skins/lightgray/img/trans.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinSkinsLightgraySkinMinCss reads file data from disk. It returns an error on failure.
func uiAssetsBinSkinsLightgraySkinMinCss() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/skins/lightgray/skin.min.css"
	name := "ui/assets/bin/skins/lightgray/skin.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinThemesDs_store reads file data from disk. It returns an error on failure.
func uiAssetsBinThemesDs_store() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/themes/.DS_Store"
	name := "ui/assets/bin/themes/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinThemesInliteIndexJs reads file data from disk. It returns an error on failure.
func uiAssetsBinThemesInliteIndexJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/themes/inlite/index.js"
	name := "ui/assets/bin/themes/inlite/index.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinThemesInliteThemeJs reads file data from disk. It returns an error on failure.
func uiAssetsBinThemesInliteThemeJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/themes/inlite/theme.js"
	name := "ui/assets/bin/themes/inlite/theme.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinThemesInliteThemeMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinThemesInliteThemeMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/themes/inlite/theme.min.js"
	name := "ui/assets/bin/themes/inlite/theme.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinThemesModernDs_store reads file data from disk. It returns an error on failure.
func uiAssetsBinThemesModernDs_store() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/themes/modern/.DS_Store"
	name := "ui/assets/bin/themes/modern/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinThemesModernThemeMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinThemesModernThemeMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/themes/modern/theme.min.js"
	name := "ui/assets/bin/themes/modern/theme.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinTinymceMinJs reads file data from disk. It returns an error on failure.
func uiAssetsBinTinymceMinJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/tinymce.min.js"
	name := "ui/assets/bin/tinymce.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsBinWebsiteBundleJs reads file data from disk. It returns an error on failure.
func uiAssetsBinWebsiteBundleJs() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/bin/website.bundle.js"
	name := "ui/assets/bin/website.bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsCssDs_store reads file data from disk. It returns an error on failure.
func uiAssetsCssDs_store() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/css/.DS_Store"
	name := "ui/assets/css/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsCssTachyonsLoadingioCss reads file data from disk. It returns an error on failure.
func uiAssetsCssTachyonsLoadingioCss() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/css/tachyons+loadingio.css"
	name := "ui/assets/css/tachyons+loadingio.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImgDs_store reads file data from disk. It returns an error on failure.
func uiAssetsImgDs_store() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/img/.DS_Store"
	name := "ui/assets/img/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImgAppimagePng reads file data from disk. It returns an error on failure.
func uiAssetsImgAppimagePng() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/img/appimage.png"
	name := "ui/assets/img/appimage.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImgApplestorePng reads file data from disk. It returns an error on failure.
func uiAssetsImgApplestorePng() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/img/applestore.png"
	name := "ui/assets/img/applestore.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImgDefaultJpg reads file data from disk. It returns an error on failure.
func uiAssetsImgDefaultJpg() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/img/default.jpg"
	name := "ui/assets/img/default.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImgGooglestorePng reads file data from disk. It returns an error on failure.
func uiAssetsImgGooglestorePng() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/img/googlestore.png"
	name := "ui/assets/img/googlestore.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsImgLogoPng reads file data from disk. It returns an error on failure.
func uiAssetsImgLogoPng() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/img/logo.png"
	name := "ui/assets/img/logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiAssetsManifestJson reads file data from disk. It returns an error on failure.
func uiAssetsManifestJson() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/assets/manifest.json"
	name := "ui/assets/manifest.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiTemplatesEmailConfirmationHtml reads file data from disk. It returns an error on failure.
func uiTemplatesEmailConfirmationHtml() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/templates/email-confirmation.html"
	name := "ui/templates/email-confirmation.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiTemplatesInvitationAcceptedHtml reads file data from disk. It returns an error on failure.
func uiTemplatesInvitationAcceptedHtml() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/templates/invitation-accepted.html"
	name := "ui/templates/invitation-accepted.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiTemplatesInviteToTeamHtml reads file data from disk. It returns an error on failure.
func uiTemplatesInviteToTeamHtml() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/templates/invite-to-team.html"
	name := "ui/templates/invite-to-team.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiTemplatesInviteHtml reads file data from disk. It returns an error on failure.
func uiTemplatesInviteHtml() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/templates/invite.html"
	name := "ui/templates/invite.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiTemplatesNotifyAdminHtm reads file data from disk. It returns an error on failure.
func uiTemplatesNotifyAdminHtm() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/templates/notify-admin.htm"
	name := "ui/templates/notify-admin.htm"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiTemplatesReportHtml reads file data from disk. It returns an error on failure.
func uiTemplatesReportHtml() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/templates/report.html"
	name := "ui/templates/report.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiTemplatesResetHtml reads file data from disk. It returns an error on failure.
func uiTemplatesResetHtml() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/templates/reset.html"
	name := "ui/templates/reset.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiTemplatesWelcomeHtml reads file data from disk. It returns an error on failure.
func uiTemplatesWelcomeHtml() (*asset, error) {
	path := "/Codebase/GolangProjects/src/pdia/ui/templates/welcome.html"
	name := "ui/templates/welcome.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public.pem": publicPem,
	"private.pem": privatePem,
	"ui/404.html": ui404Html,
	"ui/451.html": ui451Html,
	"ui/index.html": uiIndexHtml,
	"ui/assets/.DS_Store": uiAssetsDs_store,
	"ui/assets/bin/.DS_Store": uiAssetsBinDs_store,
	"ui/assets/bin/custom.js": uiAssetsBinCustomJs,
	"ui/assets/bin/plugins/.DS_Store": uiAssetsBinPluginsDs_store,
	"ui/assets/bin/plugins/advlist/plugin.min.js": uiAssetsBinPluginsAdvlistPluginMinJs,
	"ui/assets/bin/plugins/anchor/plugin.min.js": uiAssetsBinPluginsAnchorPluginMinJs,
	"ui/assets/bin/plugins/autolink/plugin.min.js": uiAssetsBinPluginsAutolinkPluginMinJs,
	"ui/assets/bin/plugins/autoresize/plugin.min.js": uiAssetsBinPluginsAutoresizePluginMinJs,
	"ui/assets/bin/plugins/autosave/plugin.min.js": uiAssetsBinPluginsAutosavePluginMinJs,
	"ui/assets/bin/plugins/bbcode/plugin.min.js": uiAssetsBinPluginsBbcodePluginMinJs,
	"ui/assets/bin/plugins/charmap/plugin.min.js": uiAssetsBinPluginsCharmapPluginMinJs,
	"ui/assets/bin/plugins/code/plugin.js": uiAssetsBinPluginsCodePluginJs,
	"ui/assets/bin/plugins/code/plugin.min.js": uiAssetsBinPluginsCodePluginMinJs,
	"ui/assets/bin/plugins/codesample/css/prism.css": uiAssetsBinPluginsCodesampleCssPrismCss,
	"ui/assets/bin/plugins/codesample/plugin.min.js": uiAssetsBinPluginsCodesamplePluginMinJs,
	"ui/assets/bin/plugins/colorpicker/plugin.min.js": uiAssetsBinPluginsColorpickerPluginMinJs,
	"ui/assets/bin/plugins/contextmenu/plugin.min.js": uiAssetsBinPluginsContextmenuPluginMinJs,
	"ui/assets/bin/plugins/directionality/plugin.min.js": uiAssetsBinPluginsDirectionalityPluginMinJs,
	"ui/assets/bin/plugins/emoticons/img/smiley-cool.gif": uiAssetsBinPluginsEmoticonsImgSmileyCoolGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-cry.gif": uiAssetsBinPluginsEmoticonsImgSmileyCryGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-embarassed.gif": uiAssetsBinPluginsEmoticonsImgSmileyEmbarassedGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-foot-in-mouth.gif": uiAssetsBinPluginsEmoticonsImgSmileyFootInMouthGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-frown.gif": uiAssetsBinPluginsEmoticonsImgSmileyFrownGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-innocent.gif": uiAssetsBinPluginsEmoticonsImgSmileyInnocentGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-kiss.gif": uiAssetsBinPluginsEmoticonsImgSmileyKissGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-laughing.gif": uiAssetsBinPluginsEmoticonsImgSmileyLaughingGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-money-mouth.gif": uiAssetsBinPluginsEmoticonsImgSmileyMoneyMouthGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-sealed.gif": uiAssetsBinPluginsEmoticonsImgSmileySealedGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-smile.gif": uiAssetsBinPluginsEmoticonsImgSmileySmileGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-surprised.gif": uiAssetsBinPluginsEmoticonsImgSmileySurprisedGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-tongue-out.gif": uiAssetsBinPluginsEmoticonsImgSmileyTongueOutGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-undecided.gif": uiAssetsBinPluginsEmoticonsImgSmileyUndecidedGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-wink.gif": uiAssetsBinPluginsEmoticonsImgSmileyWinkGif,
	"ui/assets/bin/plugins/emoticons/img/smiley-yell.gif": uiAssetsBinPluginsEmoticonsImgSmileyYellGif,
	"ui/assets/bin/plugins/emoticons/plugin.min.js": uiAssetsBinPluginsEmoticonsPluginMinJs,
	"ui/assets/bin/plugins/fullpage/plugin.js": uiAssetsBinPluginsFullpagePluginJs,
	"ui/assets/bin/plugins/fullpage/plugin.min.js": uiAssetsBinPluginsFullpagePluginMinJs,
	"ui/assets/bin/plugins/fullscreen/plugin.js": uiAssetsBinPluginsFullscreenPluginJs,
	"ui/assets/bin/plugins/fullscreen/plugin.min.js": uiAssetsBinPluginsFullscreenPluginMinJs,
	"ui/assets/bin/plugins/help/img/logo.png": uiAssetsBinPluginsHelpImgLogoPng,
	"ui/assets/bin/plugins/help/plugin.min.js": uiAssetsBinPluginsHelpPluginMinJs,
	"ui/assets/bin/plugins/hr/plugin.min.js": uiAssetsBinPluginsHrPluginMinJs,
	"ui/assets/bin/plugins/image/plugin.min.js": uiAssetsBinPluginsImagePluginMinJs,
	"ui/assets/bin/plugins/imagetools/plugin.min.js": uiAssetsBinPluginsImagetoolsPluginMinJs,
	"ui/assets/bin/plugins/importcss/plugin.min.js": uiAssetsBinPluginsImportcssPluginMinJs,
	"ui/assets/bin/plugins/insertdatetime/plugin.min.js": uiAssetsBinPluginsInsertdatetimePluginMinJs,
	"ui/assets/bin/plugins/legacyoutput/plugin.min.js": uiAssetsBinPluginsLegacyoutputPluginMinJs,
	"ui/assets/bin/plugins/link/plugin.min.js": uiAssetsBinPluginsLinkPluginMinJs,
	"ui/assets/bin/plugins/lists/plugin.min.js": uiAssetsBinPluginsListsPluginMinJs,
	"ui/assets/bin/plugins/media/plugin.min.js": uiAssetsBinPluginsMediaPluginMinJs,
	"ui/assets/bin/plugins/nonbreaking/plugin.min.js": uiAssetsBinPluginsNonbreakingPluginMinJs,
	"ui/assets/bin/plugins/noneditable/plugin.min.js": uiAssetsBinPluginsNoneditablePluginMinJs,
	"ui/assets/bin/plugins/pagebreak/plugin.min.js": uiAssetsBinPluginsPagebreakPluginMinJs,
	"ui/assets/bin/plugins/paste/plugin.min.js": uiAssetsBinPluginsPastePluginMinJs,
	"ui/assets/bin/plugins/preview/plugin.min.js": uiAssetsBinPluginsPreviewPluginMinJs,
	"ui/assets/bin/plugins/print/plugin.min.js": uiAssetsBinPluginsPrintPluginMinJs,
	"ui/assets/bin/plugins/save/plugin.min.js": uiAssetsBinPluginsSavePluginMinJs,
	"ui/assets/bin/plugins/searchreplace/plugin.min.js": uiAssetsBinPluginsSearchreplacePluginMinJs,
	"ui/assets/bin/plugins/spellchecker/plugin.min.js": uiAssetsBinPluginsSpellcheckerPluginMinJs,
	"ui/assets/bin/plugins/tabfocus/plugin.min.js": uiAssetsBinPluginsTabfocusPluginMinJs,
	"ui/assets/bin/plugins/table/plugin.min.js": uiAssetsBinPluginsTablePluginMinJs,
	"ui/assets/bin/plugins/template/plugin.min.js": uiAssetsBinPluginsTemplatePluginMinJs,
	"ui/assets/bin/plugins/textcolor/plugin.min.js": uiAssetsBinPluginsTextcolorPluginMinJs,
	"ui/assets/bin/plugins/textpattern/plugin.min.js": uiAssetsBinPluginsTextpatternPluginMinJs,
	"ui/assets/bin/plugins/toc/plugin.min.js": uiAssetsBinPluginsTocPluginMinJs,
	"ui/assets/bin/plugins/visualblocks/css/visualblocks.css": uiAssetsBinPluginsVisualblocksCssVisualblocksCss,
	"ui/assets/bin/plugins/visualblocks/plugin.min.js": uiAssetsBinPluginsVisualblocksPluginMinJs,
	"ui/assets/bin/plugins/visualchars/plugin.min.js": uiAssetsBinPluginsVisualcharsPluginMinJs,
	"ui/assets/bin/plugins/wordcount/plugin.min.js": uiAssetsBinPluginsWordcountPluginMinJs,
	"ui/assets/bin/service-worker.js": uiAssetsBinServiceWorkerJs,
	"ui/assets/bin/skins/.DS_Store": uiAssetsBinSkinsDs_store,
	"ui/assets/bin/skins/lightgray/.DS_Store": uiAssetsBinSkinsLightgrayDs_store,
	"ui/assets/bin/skins/lightgray/content.inline.min.css": uiAssetsBinSkinsLightgrayContentInlineMinCss,
	"ui/assets/bin/skins/lightgray/content.min.css": uiAssetsBinSkinsLightgrayContentMinCss,
	"ui/assets/bin/skins/lightgray/fonts/tinymce-small.eot": uiAssetsBinSkinsLightgrayFontsTinymceSmallEot,
	"ui/assets/bin/skins/lightgray/fonts/tinymce-small.svg": uiAssetsBinSkinsLightgrayFontsTinymceSmallSvg,
	"ui/assets/bin/skins/lightgray/fonts/tinymce-small.ttf": uiAssetsBinSkinsLightgrayFontsTinymceSmallTtf,
	"ui/assets/bin/skins/lightgray/fonts/tinymce-small.woff": uiAssetsBinSkinsLightgrayFontsTinymceSmallWoff,
	"ui/assets/bin/skins/lightgray/fonts/tinymce.eot": uiAssetsBinSkinsLightgrayFontsTinymceEot,
	"ui/assets/bin/skins/lightgray/fonts/tinymce.svg": uiAssetsBinSkinsLightgrayFontsTinymceSvg,
	"ui/assets/bin/skins/lightgray/fonts/tinymce.ttf": uiAssetsBinSkinsLightgrayFontsTinymceTtf,
	"ui/assets/bin/skins/lightgray/fonts/tinymce.woff": uiAssetsBinSkinsLightgrayFontsTinymceWoff,
	"ui/assets/bin/skins/lightgray/img/anchor.gif": uiAssetsBinSkinsLightgrayImgAnchorGif,
	"ui/assets/bin/skins/lightgray/img/loader.gif": uiAssetsBinSkinsLightgrayImgLoaderGif,
	"ui/assets/bin/skins/lightgray/img/object.gif": uiAssetsBinSkinsLightgrayImgObjectGif,
	"ui/assets/bin/skins/lightgray/img/trans.gif": uiAssetsBinSkinsLightgrayImgTransGif,
	"ui/assets/bin/skins/lightgray/skin.min.css": uiAssetsBinSkinsLightgraySkinMinCss,
	"ui/assets/bin/themes/.DS_Store": uiAssetsBinThemesDs_store,
	"ui/assets/bin/themes/inlite/index.js": uiAssetsBinThemesInliteIndexJs,
	"ui/assets/bin/themes/inlite/theme.js": uiAssetsBinThemesInliteThemeJs,
	"ui/assets/bin/themes/inlite/theme.min.js": uiAssetsBinThemesInliteThemeMinJs,
	"ui/assets/bin/themes/modern/.DS_Store": uiAssetsBinThemesModernDs_store,
	"ui/assets/bin/themes/modern/theme.min.js": uiAssetsBinThemesModernThemeMinJs,
	"ui/assets/bin/tinymce.min.js": uiAssetsBinTinymceMinJs,
	"ui/assets/bin/website.bundle.js": uiAssetsBinWebsiteBundleJs,
	"ui/assets/css/.DS_Store": uiAssetsCssDs_store,
	"ui/assets/css/tachyons+loadingio.css": uiAssetsCssTachyonsLoadingioCss,
	"ui/assets/img/.DS_Store": uiAssetsImgDs_store,
	"ui/assets/img/appimage.png": uiAssetsImgAppimagePng,
	"ui/assets/img/applestore.png": uiAssetsImgApplestorePng,
	"ui/assets/img/default.jpg": uiAssetsImgDefaultJpg,
	"ui/assets/img/googlestore.png": uiAssetsImgGooglestorePng,
	"ui/assets/img/logo.png": uiAssetsImgLogoPng,
	"ui/assets/manifest.json": uiAssetsManifestJson,
	"ui/templates/email-confirmation.html": uiTemplatesEmailConfirmationHtml,
	"ui/templates/invitation-accepted.html": uiTemplatesInvitationAcceptedHtml,
	"ui/templates/invite-to-team.html": uiTemplatesInviteToTeamHtml,
	"ui/templates/invite.html": uiTemplatesInviteHtml,
	"ui/templates/notify-admin.htm": uiTemplatesNotifyAdminHtm,
	"ui/templates/report.html": uiTemplatesReportHtml,
	"ui/templates/reset.html": uiTemplatesResetHtml,
	"ui/templates/welcome.html": uiTemplatesWelcomeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"private.pem": &bintree{privatePem, map[string]*bintree{}},
	"public.pem": &bintree{publicPem, map[string]*bintree{}},
	"ui": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{ui404Html, map[string]*bintree{}},
		"451.html": &bintree{ui451Html, map[string]*bintree{}},
		"assets": &bintree{nil, map[string]*bintree{
			".DS_Store": &bintree{uiAssetsDs_store, map[string]*bintree{}},
			"bin": &bintree{nil, map[string]*bintree{
				".DS_Store": &bintree{uiAssetsBinDs_store, map[string]*bintree{}},
				"custom.js": &bintree{uiAssetsBinCustomJs, map[string]*bintree{}},
				"plugins": &bintree{nil, map[string]*bintree{
					".DS_Store": &bintree{uiAssetsBinPluginsDs_store, map[string]*bintree{}},
					"advlist": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsAdvlistPluginMinJs, map[string]*bintree{}},
					}},
					"anchor": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsAnchorPluginMinJs, map[string]*bintree{}},
					}},
					"autolink": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsAutolinkPluginMinJs, map[string]*bintree{}},
					}},
					"autoresize": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsAutoresizePluginMinJs, map[string]*bintree{}},
					}},
					"autosave": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsAutosavePluginMinJs, map[string]*bintree{}},
					}},
					"bbcode": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsBbcodePluginMinJs, map[string]*bintree{}},
					}},
					"charmap": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsCharmapPluginMinJs, map[string]*bintree{}},
					}},
					"code": &bintree{nil, map[string]*bintree{
						"plugin.js": &bintree{uiAssetsBinPluginsCodePluginJs, map[string]*bintree{}},
						"plugin.min.js": &bintree{uiAssetsBinPluginsCodePluginMinJs, map[string]*bintree{}},
					}},
					"codesample": &bintree{nil, map[string]*bintree{
						"css": &bintree{nil, map[string]*bintree{
							"prism.css": &bintree{uiAssetsBinPluginsCodesampleCssPrismCss, map[string]*bintree{}},
						}},
						"plugin.min.js": &bintree{uiAssetsBinPluginsCodesamplePluginMinJs, map[string]*bintree{}},
					}},
					"colorpicker": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsColorpickerPluginMinJs, map[string]*bintree{}},
					}},
					"contextmenu": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsContextmenuPluginMinJs, map[string]*bintree{}},
					}},
					"directionality": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsDirectionalityPluginMinJs, map[string]*bintree{}},
					}},
					"emoticons": &bintree{nil, map[string]*bintree{
						"img": &bintree{nil, map[string]*bintree{
							"smiley-cool.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyCoolGif, map[string]*bintree{}},
							"smiley-cry.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyCryGif, map[string]*bintree{}},
							"smiley-embarassed.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyEmbarassedGif, map[string]*bintree{}},
							"smiley-foot-in-mouth.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyFootInMouthGif, map[string]*bintree{}},
							"smiley-frown.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyFrownGif, map[string]*bintree{}},
							"smiley-innocent.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyInnocentGif, map[string]*bintree{}},
							"smiley-kiss.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyKissGif, map[string]*bintree{}},
							"smiley-laughing.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyLaughingGif, map[string]*bintree{}},
							"smiley-money-mouth.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyMoneyMouthGif, map[string]*bintree{}},
							"smiley-sealed.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileySealedGif, map[string]*bintree{}},
							"smiley-smile.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileySmileGif, map[string]*bintree{}},
							"smiley-surprised.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileySurprisedGif, map[string]*bintree{}},
							"smiley-tongue-out.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyTongueOutGif, map[string]*bintree{}},
							"smiley-undecided.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyUndecidedGif, map[string]*bintree{}},
							"smiley-wink.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyWinkGif, map[string]*bintree{}},
							"smiley-yell.gif": &bintree{uiAssetsBinPluginsEmoticonsImgSmileyYellGif, map[string]*bintree{}},
						}},
						"plugin.min.js": &bintree{uiAssetsBinPluginsEmoticonsPluginMinJs, map[string]*bintree{}},
					}},
					"fullpage": &bintree{nil, map[string]*bintree{
						"plugin.js": &bintree{uiAssetsBinPluginsFullpagePluginJs, map[string]*bintree{}},
						"plugin.min.js": &bintree{uiAssetsBinPluginsFullpagePluginMinJs, map[string]*bintree{}},
					}},
					"fullscreen": &bintree{nil, map[string]*bintree{
						"plugin.js": &bintree{uiAssetsBinPluginsFullscreenPluginJs, map[string]*bintree{}},
						"plugin.min.js": &bintree{uiAssetsBinPluginsFullscreenPluginMinJs, map[string]*bintree{}},
					}},
					"help": &bintree{nil, map[string]*bintree{
						"img": &bintree{nil, map[string]*bintree{
							"logo.png": &bintree{uiAssetsBinPluginsHelpImgLogoPng, map[string]*bintree{}},
						}},
						"plugin.min.js": &bintree{uiAssetsBinPluginsHelpPluginMinJs, map[string]*bintree{}},
					}},
					"hr": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsHrPluginMinJs, map[string]*bintree{}},
					}},
					"image": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsImagePluginMinJs, map[string]*bintree{}},
					}},
					"imagetools": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsImagetoolsPluginMinJs, map[string]*bintree{}},
					}},
					"importcss": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsImportcssPluginMinJs, map[string]*bintree{}},
					}},
					"insertdatetime": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsInsertdatetimePluginMinJs, map[string]*bintree{}},
					}},
					"legacyoutput": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsLegacyoutputPluginMinJs, map[string]*bintree{}},
					}},
					"link": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsLinkPluginMinJs, map[string]*bintree{}},
					}},
					"lists": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsListsPluginMinJs, map[string]*bintree{}},
					}},
					"media": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsMediaPluginMinJs, map[string]*bintree{}},
					}},
					"nonbreaking": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsNonbreakingPluginMinJs, map[string]*bintree{}},
					}},
					"noneditable": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsNoneditablePluginMinJs, map[string]*bintree{}},
					}},
					"pagebreak": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsPagebreakPluginMinJs, map[string]*bintree{}},
					}},
					"paste": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsPastePluginMinJs, map[string]*bintree{}},
					}},
					"preview": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsPreviewPluginMinJs, map[string]*bintree{}},
					}},
					"print": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsPrintPluginMinJs, map[string]*bintree{}},
					}},
					"save": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsSavePluginMinJs, map[string]*bintree{}},
					}},
					"searchreplace": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsSearchreplacePluginMinJs, map[string]*bintree{}},
					}},
					"spellchecker": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsSpellcheckerPluginMinJs, map[string]*bintree{}},
					}},
					"tabfocus": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsTabfocusPluginMinJs, map[string]*bintree{}},
					}},
					"table": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsTablePluginMinJs, map[string]*bintree{}},
					}},
					"template": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsTemplatePluginMinJs, map[string]*bintree{}},
					}},
					"textcolor": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsTextcolorPluginMinJs, map[string]*bintree{}},
					}},
					"textpattern": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsTextpatternPluginMinJs, map[string]*bintree{}},
					}},
					"toc": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsTocPluginMinJs, map[string]*bintree{}},
					}},
					"visualblocks": &bintree{nil, map[string]*bintree{
						"css": &bintree{nil, map[string]*bintree{
							"visualblocks.css": &bintree{uiAssetsBinPluginsVisualblocksCssVisualblocksCss, map[string]*bintree{}},
						}},
						"plugin.min.js": &bintree{uiAssetsBinPluginsVisualblocksPluginMinJs, map[string]*bintree{}},
					}},
					"visualchars": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsVisualcharsPluginMinJs, map[string]*bintree{}},
					}},
					"wordcount": &bintree{nil, map[string]*bintree{
						"plugin.min.js": &bintree{uiAssetsBinPluginsWordcountPluginMinJs, map[string]*bintree{}},
					}},
				}},
				"service-worker.js": &bintree{uiAssetsBinServiceWorkerJs, map[string]*bintree{}},
				"skins": &bintree{nil, map[string]*bintree{
					".DS_Store": &bintree{uiAssetsBinSkinsDs_store, map[string]*bintree{}},
					"lightgray": &bintree{nil, map[string]*bintree{
						".DS_Store": &bintree{uiAssetsBinSkinsLightgrayDs_store, map[string]*bintree{}},
						"content.inline.min.css": &bintree{uiAssetsBinSkinsLightgrayContentInlineMinCss, map[string]*bintree{}},
						"content.min.css": &bintree{uiAssetsBinSkinsLightgrayContentMinCss, map[string]*bintree{}},
						"fonts": &bintree{nil, map[string]*bintree{
							"tinymce-small.eot": &bintree{uiAssetsBinSkinsLightgrayFontsTinymceSmallEot, map[string]*bintree{}},
							"tinymce-small.svg": &bintree{uiAssetsBinSkinsLightgrayFontsTinymceSmallSvg, map[string]*bintree{}},
							"tinymce-small.ttf": &bintree{uiAssetsBinSkinsLightgrayFontsTinymceSmallTtf, map[string]*bintree{}},
							"tinymce-small.woff": &bintree{uiAssetsBinSkinsLightgrayFontsTinymceSmallWoff, map[string]*bintree{}},
							"tinymce.eot": &bintree{uiAssetsBinSkinsLightgrayFontsTinymceEot, map[string]*bintree{}},
							"tinymce.svg": &bintree{uiAssetsBinSkinsLightgrayFontsTinymceSvg, map[string]*bintree{}},
							"tinymce.ttf": &bintree{uiAssetsBinSkinsLightgrayFontsTinymceTtf, map[string]*bintree{}},
							"tinymce.woff": &bintree{uiAssetsBinSkinsLightgrayFontsTinymceWoff, map[string]*bintree{}},
						}},
						"img": &bintree{nil, map[string]*bintree{
							"anchor.gif": &bintree{uiAssetsBinSkinsLightgrayImgAnchorGif, map[string]*bintree{}},
							"loader.gif": &bintree{uiAssetsBinSkinsLightgrayImgLoaderGif, map[string]*bintree{}},
							"object.gif": &bintree{uiAssetsBinSkinsLightgrayImgObjectGif, map[string]*bintree{}},
							"trans.gif": &bintree{uiAssetsBinSkinsLightgrayImgTransGif, map[string]*bintree{}},
						}},
						"skin.min.css": &bintree{uiAssetsBinSkinsLightgraySkinMinCss, map[string]*bintree{}},
					}},
				}},
				"themes": &bintree{nil, map[string]*bintree{
					".DS_Store": &bintree{uiAssetsBinThemesDs_store, map[string]*bintree{}},
					"inlite": &bintree{nil, map[string]*bintree{
						"index.js": &bintree{uiAssetsBinThemesInliteIndexJs, map[string]*bintree{}},
						"theme.js": &bintree{uiAssetsBinThemesInliteThemeJs, map[string]*bintree{}},
						"theme.min.js": &bintree{uiAssetsBinThemesInliteThemeMinJs, map[string]*bintree{}},
					}},
					"modern": &bintree{nil, map[string]*bintree{
						".DS_Store": &bintree{uiAssetsBinThemesModernDs_store, map[string]*bintree{}},
						"theme.min.js": &bintree{uiAssetsBinThemesModernThemeMinJs, map[string]*bintree{}},
					}},
				}},
				"tinymce.min.js": &bintree{uiAssetsBinTinymceMinJs, map[string]*bintree{}},
				"website.bundle.js": &bintree{uiAssetsBinWebsiteBundleJs, map[string]*bintree{}},
			}},
			"css": &bintree{nil, map[string]*bintree{
				".DS_Store": &bintree{uiAssetsCssDs_store, map[string]*bintree{}},
				"tachyons+loadingio.css": &bintree{uiAssetsCssTachyonsLoadingioCss, map[string]*bintree{}},
			}},
			"img": &bintree{nil, map[string]*bintree{
				".DS_Store": &bintree{uiAssetsImgDs_store, map[string]*bintree{}},
				"appimage.png": &bintree{uiAssetsImgAppimagePng, map[string]*bintree{}},
				"applestore.png": &bintree{uiAssetsImgApplestorePng, map[string]*bintree{}},
				"default.jpg": &bintree{uiAssetsImgDefaultJpg, map[string]*bintree{}},
				"googlestore.png": &bintree{uiAssetsImgGooglestorePng, map[string]*bintree{}},
				"logo.png": &bintree{uiAssetsImgLogoPng, map[string]*bintree{}},
			}},
			"manifest.json": &bintree{uiAssetsManifestJson, map[string]*bintree{}},
		}},
		"index.html": &bintree{uiIndexHtml, map[string]*bintree{}},
		"templates": &bintree{nil, map[string]*bintree{
			"email-confirmation.html": &bintree{uiTemplatesEmailConfirmationHtml, map[string]*bintree{}},
			"invitation-accepted.html": &bintree{uiTemplatesInvitationAcceptedHtml, map[string]*bintree{}},
			"invite-to-team.html": &bintree{uiTemplatesInviteToTeamHtml, map[string]*bintree{}},
			"invite.html": &bintree{uiTemplatesInviteHtml, map[string]*bintree{}},
			"notify-admin.htm": &bintree{uiTemplatesNotifyAdminHtm, map[string]*bintree{}},
			"report.html": &bintree{uiTemplatesReportHtml, map[string]*bintree{}},
			"reset.html": &bintree{uiTemplatesResetHtml, map[string]*bintree{}},
			"welcome.html": &bintree{uiTemplatesWelcomeHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

